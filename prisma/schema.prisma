generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  favorites        Favorite[]
  watchHistory     WatchHistory[]

  @@map("users")
}

model Movie {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  poster      String
  backdrop    String?
  genre       String[]
  year        Int
  rating      Float
  duration    Int // in minutes
  tmdbId      Int?     @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  favorites    Favorite[]
  watchHistory WatchHistory[]
  messages     Message[]

  @@map("movies")
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  movieId    String?  @db.ObjectId
  createdAt  DateTime @default(now())

  // Relations
  sender   User   @relation("MessageSender", fields: [senderId], references: [id])
  receiver User   @relation("MessageReceiver", fields: [receiverId], references: [id])
  movie    Movie? @relation(fields: [movieId], references: [id])

  @@map("messages")
}

model Favorite {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  movieId String @db.ObjectId

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId])
  @@map("favorites")
}

model WatchHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  movieId   String   @db.ObjectId
  watchedAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@map("watch_history")
}
